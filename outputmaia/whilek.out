
TINY COMPILATION: ../example/whilek.cm
1: void main(void) {
	1: reserved word: void
	1: ID, name= main
	1: (
	1: reserved word: void
	1: )
	1: {
2:     int i;
	2: reserved word: int
	2: ID, name= i
	2: ;
3:     i = 0;
	3: ID, name= i
	3: =
	3: NUM, val= 0
	3: ;
4:     while(i < 5) {
	4: reserved word: while
	4: (
	4: ID, name= i
	4: <
	4: NUM, val= 5
	4: )
	4: {
5:         i = i + 1;
	5: ID, name= i
	5: =
	5: ID, name= i
	5: +
	5: NUM, val= 1
	5: ;
6:     }
	6: }
7: }
	7: }
	7: EOF

Syntax tree:
Declare function (return type "void"): main
        Declare int var: i
    Assign to var: i
        Const: 0
    Iteration (loop)
        Op: <
            Id: i
            Const: 5
                Assign to var: i
            Op: +
                Id: i
                Const: 1

Building Symbol Table...

Symbol table:

Variable Name  Scope     ID Type  Data Type  Line Numbers
-------------  --------  -------  ---------  -------------------------
main                     fun      void        1 
input                    fun      int        
output                   fun      void       
i              main      var      int         2  3  4  5 

Checking Types...

Type Checking Finished
* TINY Compilation to TM Code
* Standard prelude:
  0:     LD  6,0(0) 	load maxaddress from location 0
  1:     LD  2,0(0) 	load maxaddress from location 0
  2:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> Init Function (main)
  3:    LDA  7,0(7) 	jump to main
* -> declare var
* <- declare var
* -> assign
* -> Const
  4:    LDC  0,0(0) 	load const
* <- Const
  5:     ST  0,-2(2) 	assign: store value
* <- assign
* -> while
* repeat: jump after body comes back here
* -> Op
* -> Id
  6:     LD  0,-2(2) 	load id value
* <- Id
  7:     ST  0,-3(2) 	op: push left
* -> Const
  8:    LDC  0,5(0) 	load const
* <- Const
  9:     LD  1,-3(2) 	op: load left
 10:    SUB  0,1,0 	op <
 11:    JLT  0,2(7) 	br if true
 12:    LDC  0,0(0) 	false case
 13:    LDA  7,1(7) 	unconditional jmp
 14:    LDC  0,1(0) 	true case
* <- Op
* -> assign
* -> Op
* -> Id
 16:     LD  0,-2(2) 	load id value
* <- Id
 17:     ST  0,-3(2) 	op: push left
* -> Const
 18:    LDC  0,1(0) 	load const
* <- Const
 19:     LD  1,-3(2) 	op: load left
 20:    ADD  0,1,0 	op +
* <- Op
 21:     ST  0,-2(2) 	assign: store value
* <- assign
 22:    LDA  7,-17(7) 	jump to savedLoc1
 15:    JEQ  0,7(7) 	repeat: jmp to end
* <- repeat
* <- End Function
* End of execution.
 23:   HALT  0,0,0 	
