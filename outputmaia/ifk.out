
TINY COMPILATION: ../example/ifk.cm
1: void main(void) {
	1: reserved word: void
	1: ID, name= main
	1: (
	1: reserved word: void
	1: )
	1: {
2:     int x;
	2: reserved word: int
	2: ID, name= x
	2: ;
3:     x = 1;
	3: ID, name= x
	3: =
	3: NUM, val= 1
	3: ;
4:     if(x < 2) {
	4: reserved word: if
	4: (
	4: ID, name= x
	4: <
	4: NUM, val= 2
	4: )
	4: {
5:         x = 3;
	5: ID, name= x
	5: =
	5: NUM, val= 3
	5: ;
6:     }
	6: }
7: }
	7: }
	7: EOF

Syntax tree:
Declare function (return type "void"): main
        Declare int var: x
    Assign to var: x
        Const: 1
    Conditional selection
        Op: <
            Id: x
            Const: 2
                Assign to var: x
            Const: 3

Building Symbol Table...

Symbol table:

Variable Name  Scope     ID Type  Data Type  Line Numbers
-------------  --------  -------  ---------  -------------------------
main                     fun      void        1 
input                    fun      int        
output                   fun      void       
x              main      var      int         2  3  4  5 

Checking Types...

Type Checking Finished
* TINY Compilation to TM Code
* Standard prelude:
  0:     LD  6,0(0) 	load maxaddress from location 0
  1:     LD  2,0(0) 	load maxaddress from location 0
  2:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> Init Function (main)
  3:    LDA  7,0(7) 	jump to main
* -> declare var
* <- declare var
* -> assign
* -> Const
  4:    LDC  0,1(0) 	load const
* <- Const
  5:     ST  0,-2(2) 	assign: store value
* <- assign
* -> if
* -> Op
* -> Id
  6:     LD  0,-2(2) 	load id value
* <- Id
  7:     ST  0,-3(2) 	op: push left
* -> Const
  8:    LDC  0,2(0) 	load const
* <- Const
  9:     LD  1,-3(2) 	op: load left
 10:    SUB  0,1,0 	op <
 11:    JLT  0,2(7) 	br if true
 12:    LDC  0,0(0) 	false case
 13:    LDA  7,1(7) 	unconditional jmp
 14:    LDC  0,1(0) 	true case
* <- Op
* if: jump to else belongs here
* -> assign
* -> Const
 16:    LDC  0,3(0) 	load const
* <- Const
 17:     ST  0,-2(2) 	assign: store value
* <- assign
* if: jump to end belongs here
 15:    JEQ  0,3(7) 	if: jmp to else
 18:    LDA  7,0(7) 	jmp to end
* <- if
* <- End Function
* End of execution.
 19:   HALT  0,0,0 	
