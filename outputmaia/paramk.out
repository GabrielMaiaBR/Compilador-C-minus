
TINY COMPILATION: ../example/paramk.cm
1: void test(int x) {
	1: reserved word: void
	1: ID, name= test
	1: (
	1: reserved word: int
	1: ID, name= x
	1: )
	1: {
2: }
	2: }
3: void main(void) {
	3: reserved word: void
	3: ID, name= main
	3: (
	3: reserved word: void
	3: )
	3: {
4: }
	4: }
	4: EOF

Syntax tree:
Declare function (return type "void"): test
    Function param (int var): x
    Declare function (return type "void"): main
    
Building Symbol Table...

Symbol table:

Variable Name  Scope     ID Type  Data Type  Line Numbers
-------------  --------  -------  ---------  -------------------------
main                     fun      void        3 
input                    fun      int        
output                   fun      void       
test                     fun      void        1 
x              test      var      int         1 

Checking Types...

Type Checking Finished
* TINY Compilation to TM Code
* Standard prelude:
  0:     LD  6,0(0) 	load maxaddress from location 0
  1:     LD  2,0(0) 	load maxaddress from location 0
  2:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> Init Function (test)
  4:     ST  0,-1(2) 	store return address from ac
* -> Param
* <- Param
  5:    LDA  1,0(2) 	save current fp into ac1
  6:     LD  2,0(2) 	make fp = ofp
  7:     LD  7,-1(1) 	return to caller
* <- End Function
* -> Init Function (main)
  3:    LDA  7,4(7) 	jump to main
* <- End Function
* End of execution.
  8:   HALT  0,0,0 	
