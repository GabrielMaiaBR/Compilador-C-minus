
TINY COMPILATION: ../example/returnk.cm
1: int test(void) {
	1: reserved word: int
	1: ID, name= test
	1: (
	1: reserved word: void
	1: )
	1: {
2:     return 42;
	2: reserved word: return
	2: NUM, val= 42
	2: ;
3: }
	3: }
4: void main(void) {
	4: reserved word: void
	4: ID, name= main
	4: (
	4: reserved word: void
	4: )
	4: {
5: }
	5: }
	5: EOF

Syntax tree:
Declare function (return type "int"): test
        Return
        Const: 42
Declare function (return type "void"): main
    
Building Symbol Table...

Symbol table:

Variable Name  Scope     ID Type  Data Type  Line Numbers
-------------  --------  -------  ---------  -------------------------
main                     fun      void        4 
input                    fun      int        
output                   fun      void       
test                     fun      int         1 

Checking Types...

Type Checking Finished
* TINY Compilation to TM Code
* Standard prelude:
  0:     LD  6,0(0) 	load maxaddress from location 0
  1:     LD  2,0(0) 	load maxaddress from location 0
  2:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> Init Function (test)
  4:     ST  0,-1(2) 	store return address from ac
* -> return
* -> Const
  5:    LDC  0,42(0) 	load const
* <- Const
  6:    LDA  1,0(2) 	save current fp into ac1
  7:     LD  2,0(2) 	make fp = ofp
  8:     LD  7,-1(1) 	return to caller
* <- return
* <- End Function
* -> Init Function (main)
  3:    LDA  7,5(7) 	jump to main
* <- End Function
* End of execution.
  9:   HALT  0,0,0 	
