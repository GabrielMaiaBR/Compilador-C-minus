
TINY COMPILATION: ../example/actvk.cm
1: void test(int x) {
	1: reserved word: void
	1: ID, name= test
	1: (
	1: reserved word: int
	1: ID, name= x
	1: )
	1: {
2:     output(x);
	2: ID, name= output
	2: (
	2: ID, name= x
	2: )
	2: ;
3: }
	3: }
4: void main(void) {
	4: reserved word: void
	4: ID, name= main
	4: (
	4: reserved word: void
	4: )
	4: {
5:     test(42);
	5: ID, name= test
	5: (
	5: NUM, val= 42
	5: )
	5: ;
6: }
	6: }
	6: EOF

Syntax tree:
Declare function (return type "void"): test
    Function param (int var): x
        Function call: output
        Id: x
Declare function (return type "void"): main
        Function call: test
        Const: 42

Building Symbol Table...

Symbol table:

Variable Name  Scope     ID Type  Data Type  Line Numbers
-------------  --------  -------  ---------  -------------------------
main                     fun      void        4 
input                    fun      int        
output                   fun      void        2 
test                     fun      void        1  5 
x              test      var      int         1  2 

Checking Types...

Type Checking Finished
* TINY Compilation to TM Code
* Standard prelude:
  0:     LD  6,0(0) 	load maxaddress from location 0
  1:     LD  2,0(0) 	load maxaddress from location 0
  2:     ST  0,0(0) 	clear location 0
* End of standard prelude.
* -> Init Function (test)
  4:     ST  0,-1(2) 	store return address from ac
* -> Param
* <- Param
* -> Function Call (output)
* -> Id
  5:     LD  0,-2(2) 	load id value
* <- Id
  6:    OUT  0,0,0 	print value
  7:    LDA  1,0(2) 	save current fp into ac1
  8:     LD  2,0(2) 	make fp = ofp
  9:     LD  7,-1(1) 	return to caller
* <- End Function
* -> Init Function (main)
  3:    LDA  7,6(7) 	jump to main
* -> Function Call (test)
 10:     ST  2,-2(2) 	Guard fp
* -> Const
 11:    LDC  0,42(0) 	load const
* <- Const
 12:     ST  0,-4(2) 	Store value of func argument
 13:    LDA  2,-2(2) 	change fp
 14:    LDC  0,16(0) 	Guard return adress
 15:    LDA  7,-12(7) 	jump to function
* <- Function Call
* <- End Function
* End of execution.
 16:   HALT  0,0,0 	
